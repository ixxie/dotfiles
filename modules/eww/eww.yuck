;; Variables
(defvar eww_expanded false)

;; Polls
(defpoll time :interval "1s" "date +%H:%M")
(defpoll date :interval "1m" "date +%d/%m/%Y")
(defpoll volume :interval "1s" "pamixer --get-volume")
(defpoll brightness :interval "1s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll battery :interval "30s" "cat /sys/class/power_supply/BAT0/capacity")

;; Get active workspaces from Niri
(deflisten workspaces :initial "[]" "niri-msg -t get_workspaces | jq -c '.workspaces | map({id: .id, focused: .focused})'")

;; Widgets
(defwidget launcher []
  (button :class "launcher" 
          :onclick "fuzzel &" 
          :timeout "500ms"
          " "))

(defwidget clock []
    (box :orientation "h" :space-evenly false
      (label :class "clock" :text time)
      (revealer :transition "slideright" 
                :reveal eww_expanded
                :duration "300ms"
        (calendar :class "calendar" 
                  :day 1 
                  :month 1 
                  :year 2023))))

(defwidget workspaces []
  (box :class "workspaces" 
       :orientation "h" 
       :space-evenly false
    (for workspace in workspaces
      (box :class "workspace-indicator ${workspace.focused ? 'active' : 'inactive'}"))))

(defwidget volume-widget []
  (eventbox :onhover "${EWW_CMD} update eww_expanded=true"
            :onhoverlost "${EWW_CMD} update eww_expanded=false"
    (box :orientation "h" :space-evenly false
      (label :class "volume-icon" :text "")
      (revealer :transition "slideright" 
                :reveal eww_expanded
                :duration "300ms"
        (scale :class "volume-slider"
               :orientation "h"
               :value volume
               :min 0
               :max 100
               :onchange "pamixer --set-volume {}")))))

(defwidget brightness-widget []
  (eventbox :onhover "${EWW_CMD} update eww_expanded=true"
            :onhoverlost "${EWW_CMD} update eww_expanded=false"
    (box :orientation "h" :space-evenly false
      (label :class "brightness-icon" :text "")
      (revealer :transition "slideright" 
                :reveal eww_expanded
                :duration "300ms"
        (scale :class "brightness-slider"
               :orientation "h"
               :value brightness
               :min 0
               :max 100
               :onchange "brightnessctl set {}%")))))

(defwidget power-menu []
  (eventbox :onhover "${EWW_CMD} update eww_expanded=true"
            :onhoverlost "${EWW_CMD} update eww_expanded=false"
    (box :orientation "h" :space-evenly false
      (button :class "power-icon" 
              :onclick "shutdown now" 
              :timeout "500ms"
              "")
      (revealer :transition "slideright" 
                :reveal eww_expanded
                :duration "300ms"
        (box :orientation "h" :space-evenly false
          (button :class "power-option" 
                  :onclick "systemctl poweroff" 
                  :timeout "500ms"
                  "⏻ Shutdown")
          (button :class "power-option" 
                  :onclick "systemctl reboot" 
                  :timeout "500ms"
                  "⟳ Reboot")
          (button :class "power-option" 
                  :onclick "systemctl suspend" 
                  :timeout "500ms"
                  "⏾ Suspend")
          (button :class "power-option" 
                  :onclick "niri-msg quit" 
                  :timeout "500ms"
                  "⏏ Logout"))))))

(defwidget battery-widget []
  (box :class "battery" 
       :orientation "h"
    (label :text "${battery}%")))

(defwidget top-bar []
  (eventbox :onhover "${EWW_CMD} update eww_expanded=true"
            :onhoverlost "${EWW_CMD} update eww_expanded=false"
    (box :class "top-bar" 
         :orientation "v" 
         :space-evenly true
      (box :orientation "h" :space-evenly false :class "left-modules"
        (launcher)
        (clock)
        (workspaces))
      (box :orientation "h" :space-evenly false :class "right-modules"
        (battery-widget)
        (volume-widget)
        (brightness-widget)
        (power-menu)))))

;; Windows
(defwindow bar
  :monitor 0
  :exclusive true
  :geometry (geometry :x "8px" 
                      :y "8px" 
                      :width "auto" 
                      :height "100%"
                      :anchor "top center")
  :stacking "fg"
  :wm-ignore false
  (top-bar))
